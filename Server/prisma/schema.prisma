generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model Address {
address_id String @id @default(ulid())
area_name String
street_address String
city String
state String
postal_code Int

//relation
user User? @relation(fields: [user_id], references: [user_id])
user_id String? @unique

orderAddress Order? @relation(fields: [order_id], references: [id])
order_id String? @unique
}


model User{
user_id String @id @default(ulid())
email String @unique
password String
fullName String
profileImage String?
address   Address?
phone String @unique
agree Boolean @default(false)
role UserRole @default(USER)
is_verified Boolean @default(false)
status USER_STATUS @default(ACTIVE)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

service_provider Service_Provider?
Admin Admin?

orders Order[]
sentMessages Chat[] @relation("SentMessages")
receivedMessages Chat[] @relation("ReceivedMessages")

@@map("users")
}

model Admin{
  id String @id @default(ulid())
  email String @unique
  fullName String
  is_deleted Boolean @default(false)
  createdAt DateTime @default(now())
  updated DateTime @updatedAt

  user User @relation(fields: [email], references: [email])
  @@map("admins")
}

model Service_Provider{
  id String @id @default(ulid())
  email String @unique
  fullName String
  business_name String
  business_license String
  nid_number String
  govt_id_or_tin String
  facebook_profile String
  website_link String
  category String
  status Provider_Status @default(PENDING)
  is_apporved Boolean @default(false)
  submitted_at DateTime @default(now())

  //relation
  user User @relation(fields: [email], references: [email])
  providerServices ProviderServices[]
  orders Order[]
  @@map("service_provider")
}
model Service {
  id              String   @id @default(ulid())
  title           String
  description     String
  area            String
  price           Float
  is_featured     Boolean  @default(false)
  avg_rating      Float    @default(0)
  is_active       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  availabilities  ServiceAvailability[]   
  providerServices ProviderServices[]
  serviceOnCategory ServiceOnCategory[]
  orders Order[]

  @@map("services")
}

model ServiceAvailability {
  id         String   @id @default(ulid())
  day        String
  startTime  String?
  endTime    String?
  isAvailable Boolean  @default(true) 

  service   Service  @relation(fields: [serviceId], references: [id])
  serviceId String
}



model ProviderServices{
  providerId String
  service_provider Service_Provider @relation(fields: [providerId], references: [id])

  serviceId String
  service Service @relation(fields: [serviceId], references: [id])

  @@id([providerId, serviceId])

  @@map("providerServices")
}
model ServiceOnCategory {
  id          String   @id @default(ulid())
  serviceId   String
  categoryId  String
  createdAt  DateTime @default(now())

  // relations
  service     Service         @relation(fields: [serviceId], references: [id])
  category    Service_Category @relation(fields: [categoryId], references: [id])

  @@unique([serviceId, categoryId])  
  @@map("service_on_category")       
}

model Service_Category{
  id String @id @default(ulid())
  name String
  is_Active Boolean @default(true)
  //relation
  parent_categoryId String
  parent_category Parent_category @relation(fields: [parent_categoryId], references: [id])

  serviceOnCategory ServiceOnCategory[]
 
 @@map("service_category")
}

model Parent_category{
  id String @id @default(ulid())
  name String
  is_Active Boolean @default(true)
  category Service_Category[]
  @@map("parent_category")
}
model Order {
  id          String   @id @default(ulid())
  serviceId   String
  service     Service  @relation(fields: [serviceId], references: [id])

  userId      String
  user        User     @relation( fields: [userId], references: [user_id])

  fullName String
  address   Address?
  phone String
  providerId  String
  provider    Service_Provider   @relation( fields: [providerId], references: [id])

  status      Order_Status @default(PENDING) 
  price       Float
  quantity    Int? 

  scheduledDate String
  scheduledTime String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
   @@map("orders")
}

model Chat {
  id          String   @id @default(ulid())
  sender      User     @relation("SentMessages", fields: [senderId], references: [user_id])
  senderId    String

  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [user_id])
  receiverId  String

  message     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
   @@map("chat")
}



enum UserRole{
  SUPER_ADMIN
  ADMIN
  USER
  SERVICE_PROVIDER
}
enum USER_STATUS{
  ACTIVE
  BLOCKED
  DELETED
}

enum Provider_Status{
  PENDING
  ACTIVE
}
enum Order_Status{
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REJECTED
}